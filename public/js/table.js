var app = angular.module('tableApp',[]);
var allFeeds = {},
    today =  new Date ,
    weekAgo =  new Date,
    thisWeek = [],
    thisWeekLocal = [],
    weeklyFeeds = [],
    top5 = [];

app.run(function($http){
    
    $http.get('http://localhost:3000/getallfeeds').success(function(data) {
        // console.log(data);
        allFeeds = data;
        weekAgo.setDate(today.getDate() - 7);
        for (i=0; i<8; i++){
            tempDate= new Date;
            thisWeek.push(new Date(tempDate.setDate(today.getDate()-i)).toDateString());
            thisWeekLocal.push(new Date(tempDate.setDate(today.getDate()-i)).toLocaleDateString());

        }
        console.log(thisWeek);
        for(feed in allFeeds){
            if(allFeeds[feed].published <= today.toISOString() && allFeeds[feed].published >= weekAgo.toISOString())
                weeklyFeeds.push(allFeeds[feed]);
        }
        // console.log(weeklyFeeds);
    });  

    // $http.get('http://localhost:3080/getFeedsByID').success(function(data) {
    //     console.log(data);
    //     allFeeds = data;
    //     weekAgo.setDate(today.getDate() - 7);
    // for (i=0; i<8; i++){
    //     tempDate= new Date;
    //     thisWeek.push(new Date(tempDate.setDate(today.getDate()-i)).toDateString());
    // }
    // console.log(thisWeek);
    // for(feed in allFeeds){
    //     if(allFeeds[feed].published <= today.toISOString() && allFeeds[feed].published >= weekAgo.toISOString())
    //         weeklyFeeds.push(allFeeds[feed]);
    // }
    // console.log(weeklyFeeds);
    // }); 
    
    var memId,
        flag = false,
        counter = 5,
        topWords = [],
        topKeys = [];

    $http.get('http://localhost:3000/getallmembers').success(function(allMembers){
        loadTop5(allMembers);
    });

    function loadTop5(temp){
        for (i=0; i<5; i++){
            top5.push(temp[i]);
            // console.log(temp[i]);
        }
        top5.forEach(function(person){
            memId = person['_id'].id;
            tempObj = {};
            $http.get('http://localhost:3000/getFeedsByID/'+memId).success(function(memFeeds) {
                person.posts = memFeeds;
                memFeeds.forEach(function(posts){
                    topKeys.push(posts.key_word);
                    topWords.push(posts.max_str);
                })
                tempObj = _.countBy(topKeys);
                tempObj = objectWithValueSorted(tempObj);
                person.topKeys = tempObj;
                tempObj = _.countBy(topWords);
                tempObj = objectWithValueSorted(tempObj);
                person.topWords = tempObj;

                return;
            })
        })
        console.log(top5);
    }; 

    function objectWithValueSorted(object) {
        var result = _.reduceRight(_.invert(_.invert(object)), function(current, val, key){    
                    current[key] = parseInt(val);
                    // console.log();
                    return current;
                },{});
        return(result);
    }

    function addPic(personID){
        $http.get('http://localhost:3080/getPicByID/'+personID).success(function(memDetails) {
            console.log(memDetails[0].pic);
            return (memDetails[0].pic);
        });
    }
    d3.request('http://localhost:3080/getallfeeds').get(function(dataSet) {
        var margin = {top: 40, right: 20, bottom: 30, left: 40},
            width = 960 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;
        
        var x = d3.scaleLinear()
                .range([0, width]);

        var y = d3.scaleLinear()
                .range([height, 0]);
        
            x.domain([0, d3.max(dataSet, function(d,i) { return i+1; })]);
            y.domain([0, d3.max(dataSet, function(d) { return d.finalGrade; })]);
        
        var xAxis = d3.axisBottom()
                    .ticks(d3.max(dataSet, function(d,i) { return i+1; }))
                    .scale(x);

        var yAxis = d3.axisLeft().ticks(50)
                    .scale(y);

        var canvas = d3.select("body").select("p")
                    .insert("svg")
                    .attr("width", width + margin.left+10 + margin.right)
                    .attr("height", height + margin.top+10 + margin.bottom)
                    .style("background", "EEEEEE")
                    .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
                    .call(yAxis);

            canvas.append("g")
                    .attr("transform", "translate(8," + height + ")")
                    .call(xAxis);

        var div = d3.select("body").append("div")   
                    .attr("class", "tooltip")               
                    .style("opacity", 0);
            
        var circle = canvas.selectAll("circle")
                    .data(dataSet)
                    .enter()
                    .append("circle")
                    .attr("r", 1)
                    .attr("cx", function(ds, i){return(x(i));})
                    .attr("cy", function(ds){return(y(ds.finalGrade));})
                    .on("mouseover", function(d) {      
                        div.transition()        
                            .duration(200)      
                            .style("opacity", .9);      
                        div .html("<h6><b>"+d.firstName +" "+ d.lastName  + "</b></h6>" + "finalGrade: " + d.finalGrade)  
                            .style("left", (d3.event.pageX) + "px")     
                            .style("top", (d3.event.pageY - 28) + "px");    
                        })                  
                    .on("mouseout", function(d) {       
                        div.transition()        
                            .duration(500)      
                            .style("opacity", 0);   
                    })
                    .attr("fill", function(ds){return(d3.interpolateMagma(Math.random()));})
                    .attr("fill-opacity", function(ds, i){return(ds.finalGrade * 0.01)})
                    .transition()
                    .duration(1000)
                    .attr("transform", "translate(10,0)")
                    .transition()
                    .duration(1000)
                    .attr("r", 8);
    });
    //not in use. for top menu
    // $( document ).tooltip({
    //     tooltipClass: "custom-tooltip-styling"
    // });
});

// TIMELINE

var margin = {top: 20, right: 0, bottom: 20, left: 00},
    width = 960 - margin.left - margin.right,
    height = 100 - margin.top - margin.bottom;

var x = d3.scaleTime()
    .domain([new Date(2013, 7, 1), new Date(2013, 7, 15) - 1])
    .rangeRound([0, width]);

var svg = d3.select("#TIMELINE").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

svg.append("g")
    .attr("class", "axis axis--grid")
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x)
        .ticks(d3.timeHour, 12)
        .tickSize(-height)
        .tickFormat(function() { return null; }))
  .selectAll(".tick")
    .classed("tick--minor", function(d) { return d.getHours(); });

svg.append("g")
    .attr("class", "axis axis--x")
    .attr("transform", "translate(0," + height + ")")
    .call(d3.axisBottom(x)
        .ticks(d3.timeDay)
        .tickPadding(0))
    .attr("text-anchor", null)
  .selectAll("text")
    .attr("x", 6);

svg.append("g")
    .attr("class", "brush")
    .call(d3.brushX()
        .extent([[0, 0], [width, height]])
        .on("end", brushended));

function brushended() {
  if (!d3.event.sourceEvent) return; // Only transition after input.
  if (!d3.event.selection) return; // Ignore empty selections.
  var d0 = d3.event.selection.map(x.invert),
      d1 = d0.map(d3.timeDay.round);

  // If empty when rounded, use floor & ceil instead.
  if (d1[0] >= d1[1]) {
    d1[0] = d3.timeDay.floor(d0[0]);
    d1[1] = d3.timeDay.offset(d1[0]);
  }

  d3.select(this).transition().call(d3.event.target.move, d1.map(x));
}


app.controller('bodyTable', function ($scope, $http) {
    $scope.thisWeek = thisWeek;
    $scope.thisWeekLocal = thisWeekLocal;
    $scope.weeklyFeeds = weeklyFeeds;
    $scope.allFeeds = allFeeds;
    $scope.top5 = top5;
    $scope.numbers=[1,2,3];
    function postedToday(day, posts){
        console.log(posts, day);
        posts.forEach(function(post){
            if (post.published == day.toISOString())
                day.toISOString()
                return (true);
        })
        return(false);
    };
    // console.log($scope.top5);
    // thisWeek.forEach(function(feed, i){
    //     // $scope.thisWeek[i].push(feed);
    //     console.log(feed);
    // })
    // console.log($scope.thisWeek[]);
});

