var app = angular.module('tableApp',[]);
var allFeeds = [],
    today =  new Date ,
    weekAgo =  new Date,
    thisWeek = [],
    thisWeekLocal = [],
    top5ThisWeek = [],
    weeklyFeeds = [],
    top5 = [],
    d=0,
    range = null;

app.run(function($http){
    var memId,
        flag = false,
        counter = 5,
        topWords = [],
        topKeys = [];
    
        weekAgo.setDate(today.getDate() - 7);
        for (i=0; i<8; i++){
            tempDate= new Date;
            top5ThisWeek.push(new Date(tempDate.setDate(today.getDate()-i)).toLocaleDateString());
        }

    $http.get('https://holoapp.herokuapp.com/getallmembers').success(function(allMembers){
        loadTop5(allMembers);
    });

    function loadTop5(temp){
        for (i=0; i<5; i++){
            top5.push(temp[i]);
            // console.log(temp[i]);
        }
        top5.forEach(function(person){
            memId = person['_id'].id;
            tempObj = {};
            $http.get('https://holoapp.herokuapp.com/getFeedsByID/'+memId).success(function(memFeeds) {
                person.posts = memFeeds;
                memFeeds.forEach(function(posts){
                    topKeys.push(posts.key_word);
                    topWords.push(posts.max_str);
                })
                tempObj = _.countBy(topKeys);
                tempObj = objectWithValueSorted(tempObj);
                person.topKeys = tempObj;
                tempObj = _.countBy(topWords);
                tempObj = objectWithValueSorted(tempObj);
                person.topWords = tempObj;
                return;
            })
        })
    }; 

    function objectWithValueSorted(object) {
        var result = _.reduceRight(_.invert(_.invert(object)), function(current, val, key){    
                    current[key] = parseInt(val);
                    // console.log();
                    return current;
                },{});
        return(result);
    }

// TIMELINE

    var margin = {top: 20, right: 0, bottom: 20, left: 00},
        width = 960 - margin.left - margin.right,
        height = 60 - margin.top - margin.bottom;

    var x = d3.scaleTime()
        .domain([new Date(2013, 10, 1),new Date(2017, 1, 1)])
        .rangeRound([0, width]);

    var svg = d3.select("#TIMELINE").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    svg.append("g")
        .attr("class", "axis axis--grid")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x)
            .ticks(d3.timeMonth, 1)
            .tickSize(-height)
            .tickFormat(function() { return null; }))
      .selectAll(".tick")
        .classed("tick--minor", function(d) { return d.getMonth(); });

    svg.append("g")
        .attr("class", "axis axis--x")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x)
            .ticks(d3.timeYear)
            .tickPadding(1))
        .attr("text-anchor", null)
      .selectAll("text")
        .attr("x", 6);

    svg.append("g")
        .attr("class", "brush")
        .call(d3.brushX()
            .extent([[0, 0], [width, height]])
            .on("end", brushended));

    function brushended() {
      if (!d3.event.sourceEvent) return; // Only transition after input.
      if (!d3.event.selection) return; // Ignore empty selections.
      var d0 = d3.event.selection.map(x.invert),
          d1 = d0.map(d3.timeMonth.round);
          range = {'start':d1[0], 'end': d1[1] };
          console.log(range);
      // If empty when rounded, use floor & ceil instead.
      if (d1[0] >= d1[1]) {
        d1[0] = d3.timeMonth.floor(d0[0]);
        d1[1] = d3.timeMonth.offset(d1[0]);
      }

      d3.select(this).transition().call(d3.event.target.move, d1.map(x));
    }

});

app.controller('bodyTable', function ($scope, $http) {
     $scope.colorByLikes = function(likes){
        var length = 2500;
        var color = d3.scale.linear().domain([0,length])
        .interpolate(d3.interpolateHcl)
        .range(['#FFF103', '#FAF6D9']);
        
        if (likes > 2500) $scope.tempColor = '#FAF6D9';
        else $scope.tempColor = color(likes); 

        return $scope.tempColor;
    }

    $http.get('https://holoapp.herokuapp.com/getallfeeds').success(function(data) {
        console.log(data);
        $scope.totalFeeds = data.length;
        var now= new Date();
        for (i=0; i<8; i++){
            weekAgo.setDate(now.getDate() - i);
            today=weekAgo;
             tempDate= today;

            d= today.getDay();
            var day='';

            switch(d) {
                case 0:
                    day="א'";
                    break;
                case 1:
                    day="ב'";
                    break;
                case 2:
                    day="ג'";
                    break;
                case 3:
                    day="ד'";
                    break;
                case 4:
                    day="ח";
                    break;
                case 5:
                    day="ו'";
                    break;
                case 6:
                    day="ש'";
                    break;
            }
            var validDate= + today.getDate() +'.'+ (today.getMonth() + 1)  ;
            var res={ 'full': day + "  "+ validDate,
                        'date': today.getFullYear()+"-"+("0" + (today.getMonth() + 1)).slice(-2)+"-"+today.getDate()
                    };
             thisWeek.push(res);
             thisWeekLocal.push(res);
        }
        for(feed in allFeeds){
            if(allFeeds[feed].published <= today.toISOString() && allFeeds[feed].published >= weekAgo.toISOString())
                weeklyFeeds.push(allFeeds[feed]);
        }
    }); 

    $http.get('https://holoapp.herokuapp.com/getFeedsFromTo/2017-01-01/2017-01-28').success(function(d){
        $scope.allFeeds=d;
        return ;
    });

    $http.get('https://holoapp.herokuapp.com/getAllMembers').success(function(d){
        $scope.members=d;
        $scope.totalMembers = d.length;
        return ;
    });

    $scope.top5ThisWeek = top5ThisWeek;
    $scope.thisWeek = thisWeek;
    $scope.thisWeekLocal = thisWeekLocal;
    $scope.weeklyFeeds = weeklyFeeds;
    $scope.checkDate = function(x,y){
       temp= y.substring(0,10);
       res=0;
       if(temp==x){res=1;}
       else{res=-1;}
       if(temp==x)return 1;
       else return 0;
    };
   
    $scope.top5 = top5;
    function postedToday(day, posts){
        posts.forEach(function(post){
            if (post.published == day.toISOString())
                day.toISOString()
                return (true);
        })
        return(false);
    };
    $scope.infoPopup = function() {
        var popup = document.getElementById('myPopup');
        popup.classList.toggle('show');    
    }
   
});

