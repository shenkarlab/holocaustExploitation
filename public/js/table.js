var app = angular.module('tableApp',[]);
var allFeeds = [],
    totalMembers = [],
    today =  new Date ,
    weekAgo =  new Date,
    thisWeek = [],
    thisWeekLocal = [],
    weeklyFeeds = [],
    top5 = [],
    d=0,
    range = null;

app.run(function($http){
    
    // $http.get('http://localhost:3080/getFeedsByID').success(function(data) {
        // console.log(data);
    //     allFeeds = data;
    //     weekAgo.setDate(today.getDate() - 7);
    // for (i=0; i<8; i++){
    //     tempDate= new Date;
    //     thisWeek.push(new Date(tempDate.setDate(today.getDate()-i)).toDateString());
    // }
    // console.log(thisWeek);
    // for(feed in allFeeds){
    //     if(allFeeds[feed].published <= today.toISOString() && allFeeds[feed].published >= weekAgo.toISOString())
    //         weeklyFeeds.push(allFeeds[feed]);
    // }
    // console.log(weeklyFeeds);
    // }); 
    
    var memId,
        flag = false,
        counter = 5,
        topWords = [],
        topKeys = [];

    $http.get('http://localhost:3000/getallmembers').success(function(allMembers){
        loadTop5(allMembers);
    });

    function loadTop5(temp){
        for (i=0; i<5; i++){
            top5.push(temp[i]);
            // console.log(temp[i]);
        }
        top5.forEach(function(person){
            memId = person['_id'].id;
            tempObj = {};
            $http.get('http://localhost:3000/getFeedsByID/'+memId).success(function(memFeeds) {
                person.posts = memFeeds;
                memFeeds.forEach(function(posts){
                    topKeys.push(posts.key_word);
                    topWords.push(posts.max_str);
                })
                tempObj = _.countBy(topKeys);
                tempObj = objectWithValueSorted(tempObj);
                person.topKeys = tempObj;
                tempObj = _.countBy(topWords);
                tempObj = objectWithValueSorted(tempObj);
                person.topWords = tempObj;

                return;
            })
        })
        console.log(top5);
    }; 

    function objectWithValueSorted(object) {
        var result = _.reduceRight(_.invert(_.invert(object)), function(current, val, key){    
                    current[key] = parseInt(val);
                    // console.log();
                    return current;
                },{});
        return(result);
    }

    // function addPic(personID){
    //     $http.get('http://localhost:3000/getPicByID/'+personID).success(function(memDetails) {
    //         console.log(memDetails[0].pic);
    //         return (memDetails[0].pic);
    //     });
    // }
    d3.request('http://localhost:3000/getFeedsFromToPerMember/2017-01-01/2017-01-16').get(function(dataSet) {
        console.log(dataSet);
        var margin = {top: 20, right: 0, bottom: 20, left: 00},
        width = 960 - margin.left - margin.right,
        height = 100 - margin.top - margin.bottom;
        
        var x = d3.scaleLinear()
                .range([0, width]);

        var y = d3.scaleLinear()
                .range([height, 0]);
        
        //     x.domain([0, d3.max(dataSet, function(d,i) { return i+1; })]);
        //     y.domain([0, d3.max(dataSet, function(d) { return d.finalGrade; })]);
        
        // var xAxis = d3.axisBottom()
        //             .ticks(d3.max(dataSet, function(d,i) { return i+1; }))
        //             .scale(x);

        // var yAxis = d3.axisLeft().ticks(50)
        //             .scale(y);

        // var canvas = d3.select("body").select("p")
        //             .insert("svg")
        //             .attr("width", width + margin.left+10 + margin.right)
        //             .attr("height", height + margin.top+10 + margin.bottom)
        //             .style("background", "EEEEEE")
        //             .append("g")
        //             .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
        //             .call(yAxis);

        //     canvas.append("g")
        //             .attr("transform", "translate(8," + height + ")")
        //             .call(xAxis);

        // var div = d3.select("body").append("div")   
        //             .attr("class", "tooltip")               
        //             .style("opacity", 0);
            
        // var circle = canvas.selectAll("circle")
        //             .data(dataSet)
        //             .enter()
        //             .append("circle")
        //             .attr("r", 1)
        //             .attr("cx", function(ds, i){return(x(i));})
        //             .attr("cy", function(ds){return(y(ds.finalGrade));})
        //             .on("mouseover", function(d) {      
        //                 div.transition()        
        //                     .duration(200)      
        //                     .style("opacity", .9);      
        //                 div .html("<h6><b>"+d.firstName +" "+ d.lastName  + "</b></h6>" + "finalGrade: " + d.finalGrade)  
        //                     .style("left", (d3.event.pageX) + "px")     
        //                     .style("top", (d3.event.pageY - 28) + "px");    
        //                 })                  
        //             .on("mouseout", function(d) {       
        //                 div.transition()        
        //                     .duration(500)      
        //                     .style("opacity", 0);   
        //             })
        //             .attr("fill", function(ds){return(d3.interpolateMagma(Math.random()));})
        //             .attr("fill-opacity", function(ds, i){return(ds.finalGrade * 0.01)})
        //             .transition()
        //             .duration(1000)
        //             .attr("transform", "translate(10,0)")
        //             .transition()
        //             .duration(1000)
        //             .attr("r", 8);
    });
    // not in use. for top menu
    // $( document ).tooltip({
    //     tooltipClass: "custom-tooltip-styling"
    // });


// TIMELINE

    var margin = {top: 20, right: 0, bottom: 20, left: 00},
        width = 960 - margin.left - margin.right,
        height = 60 - margin.top - margin.bottom;

    var x = d3.scaleTime()
        .domain([new Date(2013, 10, 1),new Date(2017, 1, 1)])
        .rangeRound([0, width]);

    var svg = d3.select("#TIMELINE").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    svg.append("g")
        .attr("class", "axis axis--grid")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x)
            .ticks(d3.timeMonth, 1)
            .tickSize(-height)
            .tickFormat(function() { return null; }))
      .selectAll(".tick")
        .classed("tick--minor", function(d) { return d.getMonth(); });

    svg.append("g")
        .attr("class", "axis axis--x")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x)
            .ticks(d3.timeYear)
            .tickPadding(1))
        .attr("text-anchor", null)
      .selectAll("text")
        .attr("x", 6);

    svg.append("g")
        .attr("class", "brush")
        .call(d3.brushX()
            .extent([[0, 0], [width, height]])
            .on("end", brushended));

    function brushended() {
      if (!d3.event.sourceEvent) return; // Only transition after input.
      if (!d3.event.selection) return; // Ignore empty selections.
      var d0 = d3.event.selection.map(x.invert),
          d1 = d0.map(d3.timeMonth.round);
          range = {'start':d1[0], 'end': d1[1] };
          console.log(range);
      // If empty when rounded, use floor & ceil instead.
      if (d1[0] >= d1[1]) {
        d1[0] = d3.timeMonth.floor(d0[0]);
        d1[1] = d3.timeMonth.offset(d1[0]);
      }

      d3.select(this).transition().call(d3.event.target.move, d1.map(x));
    }

});
app.controller('bodyTable', function ($scope, $http) {


     $http.get('http://localhost:3000/getallfeeds').success(function(data) {
        // console.log(data);

        //weekAgo.setDate(today.getDate() - 7);
        var now= new Date();
        for (i=0; i<8; i++){
            weekAgo.setDate(now.getDate() - i);
            today=weekAgo;
            console.log(" i = "+ i+ "today >> " +today);
            //tempDate= today.getDate()-i;
             tempDate= today;

            d= today.getDay();
            var day='';

            switch(d) {
                case 0:
                    day="א'";
                    break;
                case 1:
                    day="ב'";
                    break;
                case 2:
                    day="ג'";
                    break;
                case 3:
                    day="ד'";
                    break;
                case 4:
                    day="ח";
                    break;
                case 5:
                    day="ו'";
                    break;
                case 6:
                    day="ש'";
                    break;
                    
            }


            var validDate= + today.getDate() +'.'+ (today.getMonth() + 1)  ;
            //console.log("valid date= " +validDate );
            var res={ 'full': day + "  "+ validDate,
                        'date': today.getFullYear()+"-"+("0" + (today.getMonth() + 1)).slice(-2)+"-"+today.getDate()

                    };
        console.log("res.date= " +res.date );
             thisWeek.push(res);
             thisWeekLocal.push(res);

        }
        //console.log("this week " + thisWeek);
        for(feed in allFeeds){
            //console.log("all feeds = " +feed);
            if(allFeeds[feed].published <= today.toISOString() && allFeeds[feed].published >= weekAgo.toISOString())
                weeklyFeeds.push(allFeeds[feed]);
        }
        // console.log(weeklyFeeds);
         //console.log("all feeds = " +allFeeds);

    });  



     $http.get('http://localhost:3000/getFeedsFromTo/2017-01-01/2017-01-28').success(function(d){
        console.log("d="+d);
        $scope.allFeeds=d;
        return ;
    });

    $http.get('http://localhost:3000/getAllMembers').success(function(d){
        console.log("d="+d);
        $scope.members=d;
        return ;
    });

    console.log("all feeds = " + $scope.allFeeds);
    $scope.thisWeek=thisWeek;
    $scope.thisWeekLocal=thisWeekLocal;
    $scope.weeklyFeeds = weeklyFeeds;
    $scope.checkDate= function(x,y){
       temp= y.substring(0,10);
       console.log("temp == "+ temp);
       console.log("x == "+ x);
       res=0;
       if(temp==x){res=1;}
       else{res=-1;}
       console.log("if tmp==x = res=: " + res);

       if(temp==x)return 1;
       else return 0;
    };
   
    $scope.top5 = top5;
    function postedToday(day, posts){
        console.log(posts, day);
        posts.forEach(function(post){
            if (post.published == day.toISOString())
                day.toISOString()
                return (true);
        })
        return(false);
    };
    $scope.infoPopup = function() {
        var popup = document.getElementById('myPopup');
        popup.classList.toggle('show');    
    }








    // console.log($scope.top5);
    // thisWeek.forEach(function(feed, i){
    //     // $scope.thisWeek[i].push(feed);
    //     console.log(feed);
    // })
    // console.log($scope.thisWeek[]);
});

